#!/usr/bin/env ruby
# -*- mode: ruby -*-
# vi: set ft=ruby :

# Rename to `Vagrantfile` and customize as needed. More information can
# be found at http://vagrantup.com/. After installing vagrant, you are
# able to run `vagrant up` in a terminal to build and set up a development
# environment isolated in a VirtualBox VM.
Vagrant::Config.run do |config|
  # All Vagrant configuration is done here. The most common configuration
  # options are documented and commented below. For a complete reference,
  # please see the online documentation at vagrantup.com.

  # Every Vagrant virtual environment requires a box to build off of.
  #
  # Note: Change to `precise64` if your system supports 64-bit guests.
  config.vm.box = "precise32"

  # The url from where the 'config.vm.box' box will be fetched if it
  # doesn't already exist on the user's system.
  #
  # Note: Change to `precise64` if your OS supports 64-bit guests.
  config.vm.box_url = "http://files.vagrantup.com/precise32.box"

  # Boot with a GUI so you can see the screen. (Default is headless)
  # config.vm.boot_mode = :gui

  # Assign this VM to a host only network IP, allowing you to access it
  # via the IP.
  config.vm.network :hostonly, "33.33.33.10"

  # Forward a port from the guest to the host, which allows for outside
  # computers to access the VM, whereas host only networking does not.
  config.vm.forward_port 80,   8080
  config.vm.forward_port 3306, 3306

  # Share an additional folder to the guest VM. The first argument is
  # an identifier, the second is the path on the guest to mount the
  # folder, and the third is the path on the host to the actual folder.
  # config.vm.share_folder "v-data", "/vagrant_data", "../data"
  config.vm.share_folder "v-root", File.expand_path("..", __FILE__), "."

  # Customize the virtual machine created by Vagrant. This allows you to
  # add more virtual cores, reserve additional RAM, and change the name
  # of the created machine. See http://vagrantup.com/docs/vagrantfile.html
  # config.vm.customize [
  #   "modifyvm", :id,
  #   "--memory", "1024",
  #   "--cpus", "2"
  # ]

  # Enable provisioning with chef solo, specifying a cookbooks path (relative
  # to this Vagrantfile), and adding some recipes and/or roles.
  config.vm.provision :chef_solo do |chef|
    chef.cookbooks_path = "cookbooks"

    chef.add_recipe "vagrant_main"

    chef.json.merge! \
      :vagrant_main => {
        :root    => File.expand_path("..", __FILE__),
        :docroot => File.expand_path("../public", __FILE__)
      }
  end
end
